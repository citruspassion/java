序列化就是将一个对象变成一个二进制内容，其本质是一个byte[]数组，因为序列化后可以将对应的内容保存到文件中或着吧它通过网络运输发送到远程
而反序列化就是把这个二进制内容变回对象，保存在文件的数组或者网络运输过来的 就可以变回一个对象


、json/xml的数据传递：

 在数据传输(也可称为网络传输)前，先通过序列化工具类将Java对象序列化为json/xml文件。

在数据传输(也可称为网络传输)后，再将json/xml文件反序列化为对应语言的对象

============================================================================
引用  https://blog.csdn.net/tree_ifconfig/article/details/82766587
序列化优点：

 ①将对象转为字节流存储到硬盘上，当JVM停机的话，字节流还会在硬盘上默默等待，等待下一次JVM的启动，
 把序列化的对象，通过反序列化为原来的对象，并且序列化的二进制序列能够减少存储空间（永久性保存对象）。

 ②序列化成字节流形式的对象可以进行网络传输(二进制形式)，方便了网络传输。

 ③通过序列化可以在进程间传递对象
 ============================================================================
 通过实现Serializable或者Externalizable接口，可以实现序列化
 在jdk中我们可以通过ObjectInputStream：对象输入流   ObjectOutputStream：对象输出流 来进行接下来的操作
 而在其中有readObject()方法读取这个输入流，并将我们提到的二进制内容转化为一个对象
 writeObject(Object obj)方法将将传入的obj对象进行序列化，把得到的字节序列写入到目标输出流中进行输出。




=
 ===============================================================================================
 3、实现序列化和反序列化的三种实现：

  ①若Student类仅仅实现了Serializable接口，则可以按照以下方式进行序列化和反序列化。

             ObjectOutputStream采用默认的序列化方式，对Student对象的非transient的实例变量进行序列化。 
             ObjcetInputStream采用默认的反序列化方式，对Student对象的非transient的实例变量进行反序列化。

  ②若Student类仅仅实现了Serializable接口，并且还定义了readObject(ObjectInputStream in)和writeObject(ObjectOutputSteam out)，则采用以下方式进行序列化与反序列化。

           ObjectOutputStream调用Student对象的writeObject(ObjectOutputStream out)的方法进行序列化。 
           ObjectInputStream会调用Student对象的readObject(ObjectInputStream in)的方法进行反序列化。

  ③若Student类实现了Externalnalizable接口，且Student类必须实现readExternal(ObjectInput in)和writeExternal(ObjectOutput out)方法，则按照以下方式进行序列化与反序列化。

           ObjectOutputStream调用Student对象的writeExternal(ObjectOutput out))的方法进行序列化。 
           ObjectInputStream会调用Student对象的readExternal(ObjectInput in)的方法进行反序列化。
————————————————
版权声明：本文为CSDN博主「tree_ifconfig」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/tree_ifconfig/article/details/82766587
