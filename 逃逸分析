
锁清除
如果虚拟机运行发现有一段代码不能共享竞争数据，那么就会消除锁
　比如StringBuffer的append()方法，Vector的add()方法：
 为了减少请求变量的时间，JIT编译器可以借助一种被称为逃逸分析（Escape Analysis）的技术。如果没有检测到逃逸现象，就会把锁消除
 
 
 Java Hotspot 虚拟机可以分析新创建对象的使用范围，并决定是否在 Java 堆上分配内存的一项技术。
 
 
 逃逸分析的 JVM 参数如下：

开启逃逸分析：-XX:+DoEscapeAnalysis
关闭逃逸分析：-XX:-DoEscapeAnalysis
显示分析结果：-XX:+PrintEscapeAnalysis


逃逸有三种
1、全局逃逸（GlobalEscape）

即一个对象的作用范围逃出了当前方法或者当前线程

2、参数逃逸（ArgEscape）
即一个对象被作为方法参数传递或者被参数引用，但在调用过程中不会发生全局逃逸，这个状态是通过被调方法的字节码确定的。


3.3、没有逃逸


逃逸分析优化

1.锁消除
接着上面的stringbuffer的话题
StringBuffer 和 Vector 都是用 synchronized 修饰线程安全的，但大部分情况下，它们都只是在当前线程中用到，
这样编译器就会优化移除掉这些锁操作。
锁消除的 JVM 参数如下：

开启锁消除：-XX:+EliminateLocks
关闭锁消除：-XX:-EliminateLocks
2.标量替换

标量和聚合量，基础类型和对象的引用可以理解为标量，它们不能被进一步分解。而能被进一步分解的量就是聚合量，比如：对象。

对象是聚合量，它又可以被进一步分解成标量，将其成员变量分解为分散的变量，这就叫做标量替换。

如果一个对象没有发生逃逸，那压根就不用创建它，只会在栈或者寄存器上创建它用到的成员标量，节省了内存空间，也提升了应用程序性能

标量替换的 JVM 参数如下：

开启标量替换：-XX:+EliminateAllocations
关闭标量替换：-XX:-EliminateAllocations
显示标量替换详情：-XX:+PrintEliminateAllocations


3.栈上分配

当对象没有发生逃逸时，该对象就可以通过标量替换分解成成员标量分配在栈内存中，和方法的生命周期一致，
随着栈帧出栈时销毁，减少了 GC 压力，提高了应用程序性能。
 
 public static StringBuffer craeteStringBuffer(String s1, String s2) {
    StringBuffer sb = new StringBuffer();
    sb.append(s1);
    sb.append(s2);
    return sb;
}

public static String createStringBuffer(String s1, String s2) {
    StringBuffer sb = new StringBuffer();
    sb.append(s1);
    sb.append(s2);
    return sb.toString();
}
在第一种就会有逃逸，而第二种就没逃逸
