public interface Iterator<T> {

    public boolean hasNext();
 
    public T next();

    public void remove();

}
public class SeparateIterator<T> implements Iterator<T> {
    private ArrayList<T> list;
    private int nextPosition;   //next()返回最近元素的位置
    private boolean wasNextCalled;  //需要删除的

    public SeparateIterator(ArrayList<T> arrayList) {
        list=arrayList;
        nextPosition=0;          //用于跟踪迭代到何处
        wasNextCalled=false;     //用于检出是否首先调用了next()
    }

    @Override
    public boolean hasNext() {
        return nextPosition<list.size();
    }

    @Override
    public T next() {
        if(hasNext()) {
            wasNextCalled = true;     //设置为true，remove()方法可以调用next()
            nextPosition++;
            return list.get(nextPosition-1);   //由于先前移，故减一

        }
        else
            throw new NoSuchElementException("Illegal call to next();"+"iterator is after end of list!");
    }

    @Override
    public void remove() {
        if(wasNextCalled){
            list.remove(nextPosition);
            nextPosition--;
            wasNextCalled=false;
        }
        else
            throw new IllegalStateException("Illegal call to remove();"+"next() was not called!");
    }
}



/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * public interface NestedInteger {
 *
 *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
 *     public boolean isInteger();
 *
 *     // @return the single integer that this NestedInteger holds, if it holds a single integer
 *     // Return null if this NestedInteger holds a nested list
 *     public Integer getInteger();
 *
 *     // @return the nested list that this NestedInteger holds, if it holds a nested list
 *     // Return null if this NestedInteger holds a single integer
 *     public List<NestedInteger> getList();
 * }
 */
public class NestedIterator implements Iterator<Integer> {
    private List<Integer> list;
      private Iterator<Integer> cur;
    public NestedIterator(List<NestedInteger> nestedList) {
        this.list=new ArrayList<Integer>();
        dfs(nestedList);
        cur=this.list.iterator();
    }

    @Override
    public Integer next() {
       return cur.next();

    }

    @Override
    public boolean hasNext() {
      return cur.hasNext();
    }
    private void dfs(List<NestedInteger> nestedList)
    for(NestedInteger nest:nestedList)
    {
        if(nest.isInteger())
        {
                list.add(nest.getInteger())
        }else{
            dfs(nest.getList());
        }
    }
}

/**
 * Your NestedIterator object will be instantiated and called as such:
 * NestedIterator i = new NestedIterator(nestedList);
 * while (i.hasNext()) v[f()] = i.next();
 */
