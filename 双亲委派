https://www.jianshu.com/p/1e4011617650  
https://blog.csdn.net/codeyanbao/article/details/82875064
支援链接

什么是双亲委派机制
当某个类加载器需要加载某个.class文件时，它首先把这个任务委托给他的上级类加载器，递归这个操作，如果上级的类加载器没有加载，自己才会去加载这个类。
Java是运行在Java的虚拟机(JVM)中的，但是它是如何运行在JVM中了呢？
我们编写的代码先会被编译器加载成。class文件，然后ClassLoader负责将这些class文件给加载到JVM中去执行。

jvm里面提供了3层的classloader
Bootstrap classLoader:主要负责加载核心的类库(java.lang.*等)，构造ExtClassLoader和APPClassLoader。

ExtClassLoader：主要负责加载jre/lib/ext目录下的一些扩展的jar。

AppClassLoader：主要负责加载应用程序的主函数类
首先会在AppClassLoader中检查是否加载过，如果有那就无需再加载了。
如果没有，那么会拿到父加载器，然后调用父加载器的loadClass方法。
父类中同理也会先检查自己是否已经加载过，如果没有再往上。注意这个类似递归的过程，直到到达Bootstrap classLoader之前，
都是在检查是否加载过，并不会选择自己去加载。直到BootstrapClassLoader，已经没有父加载器了，这时候开始考虑自己是否能加载了，
如果自己无法加载，会下沉到子加载器去加载，一直到最底层，如果没有任何加载器能加载，就会抛出ClassNotFoundException。
————————————————
双亲委派机制的作用
1、防止重复加载同一个.class。通过委托去向上面问一问，加载过了，就不用再加载一遍。保证数据安全。
2、保证核心.class不能被篡改。通过委托方式，不会去篡改核心.clas，即使篡改也不会去加载，即使加载也不会是同一个.class对象了。不同的加载器加载同一个.class也不是同一个Class对象。这样保证了Class执行安全。

作者：秦时的明月夜

来源：简书
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
————————————————

