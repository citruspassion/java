tcp/ip是一个协议族 里面有很多协议  udp是其中一种 而是由于tcp ip协议重要才这样命名
其协议族包括： 
应用层，传输层，网络层，网络访问层

=======================
应用层应该包括
1：超文本传输协议 即HTTP： 万维网协议
2：文件传输
3：远程登陆
4:网络管理
5：dns
============================
“TCP是一种流模式的协议，UDP是一种数据报模式的协议”，



所谓TCP ，是面向连接的协议。意思就是在收发数据前，要必须有可靠的连接才行，通常是要三次对话也就是三次握手
首先我们先要弄明白几个概念
序列号seq：占4位，用来标记数据段,tcp把所有数据都编上一个序号。第一个字节是由本地随机生成，序列号seq就是这个报文段中的第一个字节的数据编号。

确认号ack：占4个字节,期待收到对方下一个报文地第一个字节地序号，也即是说当前报文段最后一个字节的编号+1即为确认号。

确认ACK：占1位，仅当ACK=1时，确认号字段才有效。ACK=0时，确认号无效

同步SYN：同步序号，当SYN=1，ACK=0时表示：这是一个连接请求报文段。若同意连接，则在响应报文段中使得SYN=1，ACK=1
 
终止FIN：用来释放一个连接。FIN=1表示：此报文段的发送方的数据已经发送完毕



udp是一个非链接的协议，传输数据之间不建立链接，当他想传输时就简单地去抓取来自应用程序地数据，并尽可能快的将他扔到网络上（随意抓包，迅速丢）
发送端：速度受制于数据生成速度，计算机能力，和传输带宽
接收端：udp把消息段放在队列中，应用程序每次从队列中读取一个消息段
由于不建立链接，所以可以一台机向多个客户机传输相同的消息
UDP和TCP不同，发送端调用了几次write，接收端必须用相同次数的read读完。UDP是基于报文的，
在接收的时候，每次最多只能读取一个报文，报文和报文是不会合并的，如果缓冲区小于报文长度，则多出的部分会被丢弃。


所以可以总结
1：有链接和无链接
2：对资源要求 tcp多
3：udp程序结构简单
4:流模式和数据报模式
5：由于udp简单抓包，所以tcp能保证正确，udp可能丢包
6：tcp保证顺序  udp不保证







建立tcp链接  需要客户端和服务器一共发出3个包
1.客户端发出一个请求标志syn=1 ,初始序号seq=x
2.服务器收到并返回一个确认标志ACK 并发送自己的序号 seq=y 以及期待下回收到对方的第一个字节序号的 确认序号ack=x+1 以及syn=1 建立链接
3.客户端收到，发送一个确认ACK，以及自己的序号x+1， 确认序号y+1




挥手
1.客户端发送一个FIN=1 以及自己的序号seq=u 进入FIN-WAIT-1状态
2.服务器收到客户端 发出一个确认ACK  自己的序号seq=v 确认序号ack=u+1  进入CLOSE-WAIT状态
3.客户端收到进入FIN-WAIT-2
  服务器再次发出FIN=1  确认ACK  自己的序号seq=w 确认序号ack=u+1  进入LAST-ACK
4.客户端收到 发送确认ACK ack=w+1 自己的序号u+1  客户进入TIME-WAIT
客户端经过2个最长报文段寿命后，客户端CLOSE；服务器收到确认后，立刻进入CLOSE状态。

为什么三次握手和四次挥手？
如果在发送过程中的话，假如是两次：当A给B发送一个连接请求，
因为网络的原因该请求没有按时到达，A就会重新发送一次请求，
这次请求正常到，然后B就会给A一个确认请求，此时就可以传送数据了。
但是当A第一次发送的数据又来到了（A以为这个包已经丢失了），
那么B就会再次向A发送一个确认，此时的A就不知道这个确认的意义了，
而B就会在一直等待着A给他发送信息（如果这样的次数很多就会导致资源浪费）。所以说不能是两次。

四次挥手时，当收到对方的 FIN 报文时，仅仅表示对方不再发送数据了但是还能接收数据，己方是否现在关闭发送数据通道，需要上层应用来决定，因此，己方 ACK 和 FIN 一般都会分开发送。

 
在三次握手的过程中，SYN和ACK是一起发送的但是在四次挥手的时候FIN和ACK却不是一起发送的而是分开发送的，为什么呢？？？
TCP连接是全双工的也就是说接收到FIN只是说没有数据再发过来但是还是可以发送数据的，
也就是接受到一个FIN只是关闭了一个方向的数据传输，另一个方向还可以继续发送数据。
在四次挥手的时候也是这样前两次挥手只是确认关闭了一个方向的数据，加上后面两次挥手才真正的关闭了整个全双工连接。
      当socket在ESTABISHED状态时，他想主动关闭连接于是向对方发送FIN请求，
      发送完FIN请求后它处于FIN_WAIT_1状态，当对方确认ACK报文后则处于FIN_WAIT_2状态。FIN_WAIT_2表示半连接，
      
      也就是有一方要求关闭连接，另一方收到请求但是告诉她我还有一些数据要发送稍后会关闭。
      TIME_WAIT状态表示收到对方的FIN并发送出ACK.如果三次挥手可能在关闭后还有一个方向没有关。
为什么客户端最后还要等待2MSL？
客户端需要保证最后一次发送的ACK报文到服务器，如果服务器未收到，可以请求客户端重发，这样客户端还有时间再发，重启2MSL计时。









1、请求一旦发起，浏览器首先要做的事情就是解析这个域名，一般来说，浏览器会首先查看本地硬盘的 hosts 文件，
看看其中有没有和这个域名对应的规则，如果有的话就直接使用 hosts 文件里面的 ip 地址。

      2、如果在本地的 hosts 文件没有能够找到对应的 ip 地址，浏览器会发出一个 DNS请求到本地DNS服务器 。
      本地DNS服务器一般都是你的网络接入服务器商提供的，比如中国电信，中国移动。

　   3、查询你输入的网址的DNS请求到达本地DNS服务器之后，本地DNS服务器会首先查询它的缓存记录，如果缓存中有此条记录，
    就可以直接返回结果，此过程是递归的方式进行查询。如果没有，本地DNS服务器还要向DNS根服务器进行查询。

　　4、根DNS服务器没有记录具体的域名和IP地址的对应关系，而是告诉本地DNS服务器，
  你可以到域服务器上去继续查询，并给出域服务器的地址。这种过程是迭代的过程。

　　5、本地DNS服务器继续向域服务器发出请求，在这个例子中，请求的对象是.com域服务器。
  .com域服务器收到请求之后，也不会直接返回域名和IP地址的对应关系，而是告诉本地DNS服务器，你的域名的解析服务器的地址。

　　6、最后，本地DNS服务器向域名的解析服务器发出请求，这时就能收到一个域名和IP地址对应关系，
  本地DNS服务器不仅要把IP地址返回给用户电脑，还要把这个对应关系保存在缓存中，以备下次别的用户查询时，可以直接返回结果，加快网络访问。


DNS（Domain Name System，域名系统），因特网上作为域名和IP地址相互映射的一个分布式数据库，
能够使用户更方便的访问互联网，而不用去记住能够被机器直接读取的IP数串。
通过主机名，最终得到该主机名对应的IP地址的过程叫做域名解析（或主机名解析）。

　　通俗的讲，我们更习惯于记住一个网站的名字，比如www.baidu.com,而不是记住它的ip地址，比如：167.23.10.2。
  而计算机更擅长记住网站的ip地址，而不是像www.baidu.com等链接。因为，DNS就相当于一个电话本，
  比如你要找www.baidu.com这个域名，那我翻一翻我的电话本，我就知道，哦，它的电话（ip）是167.23.10.2。

DNS查询的两种方式：递归查询和迭代查询
1、递归解析

    当局部DNS服务器自己不能回答客户机的DNS查询时，它就需要向其他DNS服务器进行查询。
    此时有两种方式，
    。局部DNS服务器自己负责向其他DNS服务器进行查询，一般是先向该域名的根域服务器查询，
    再由根域名服务器一级级向下查询。最后得到的查询结果返回给局部DNS服务器，再由局部DNS服务器返回给客户端。



2、迭代解析


　　当局部DNS服务器自己不能回答客户机的DNS查询时，也可以通过迭代查询的方式进行解析，
 局部DNS服务器不是自己向其他DNS服务器进行查询，
  而是把能解析该域名的其他DNS服务器的IP地址返回给客户端DNS程序，客户端DNS程序再继续向这些DNS服务器进行查询，
  直到得到查询结果为止。也就是说，迭代解析只是帮你找到相关的服务器而已，而不会帮你去查。
  比如说：baidu.com的服务器ip地址在192.168.4.5这里，
